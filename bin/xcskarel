#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'XCSKarel'
require 'rubygems'
require 'commander'

XCSKarel.set_no_log(true)

class XCSKarelApplication
  include Commander::Methods

  def add_xcs_creds(c)
    c.option '--host Hostname', 'Xcode Server\'s hostname or IP address (default: localhost) (also can be specified as the environment variable XCSKAREL_HOST)'
    c.option '--user Username', 'Xcode Server username (also can be specified as the environment variable XCSKAREL_USER)'
    c.option '--pass Password', 'Xcode Server password (also can be specified as the environment variable XCSKAREL_PASS)'
  end

  def add_xcs_options(c)
    add_xcs_creds(c)
  end

  def add_bot_options(c)
    c.option '--bot BOT_ID_OR_NAME', '(required) Bot identifier or name'
  end

  def add_bot_or_integration_options(c)
    c.option '--bot BOT_ID_OR_NAME', 'Bot identifier or name'
    c.option '--integration INTEGRATION_ID', 'Integration identifier'
  end

  def creds_from_options(options)
    host = options.host || ENV['XCSKAREL_HOST'] || "localhost"
    user = options.user || ENV['XCSKAREL_USER'] || ENV['USER']
    pass = options.pass || ENV['XCSKAREL_PASS']
    return host, user, pass
  end

  def create_server_from_options(options)
    creds = creds_from_options(options)
    XCSKarel::Server.new(*creds)
  end

  def create_connection_from_options(options)
    creds = creds_from_options(options)
    XCSKarel::Remote::Connection.new(*creds)
  end

  def run
    program :name, 'xcskarel'
    program :version, XCSKarel::VERSION
    program :description, 'Tool for managing your Xcode Server & Bot configurations'
    program :help, 'Author', 'Honza Dvorsky <http://honzadvorsky.com>'
    program :help, 'GitHub', 'https://github.com/czechboy0/xcskarel'

    global_option('--verbose', 'Print internal logs') { XCSKarel.set_no_log(false) }
    global_option('--no_pretty', 'Disables output JSON prettification')
    global_option('--no_filter', 'Prints full JSON payload for objects instead of just filtering the important ones')

    # Managing local xcsconfig folder

    command :'config list' do |c|
      c.syntax = 'xcskarel config list [options]'
      c.description = 'Lists the Xcode Bot configurations found in this folder'
      c.example 'lists all configurations stored in this folder', 'xcskarel config list'
      c.action do |args, options|
        config_folder = XCSKarel::XCSFile.get_config_folder
        return unless config_folder
        XCSKarel::Application.list_configs(config_folder)
      end
    end

    command :'config show' do |c|
      c.syntax = 'xcskarel config show [options]'
      c.description = 'Opens the selected config for editing'
      c.example 'opens a config of choice', 'xcskarel config show'
      c.action do |args, options|
        config_folder = XCSKarel::XCSFile.get_config_folder
        return unless config_folder
        XCSKarel::Application.show_config(config_folder)
      end
    end

    command :'config new' do |c|
      c.syntax = 'xcskarel config new [options]'
      c.description = 'Starts the interactive process of creating a new config from an existing Bot'
      c.example 'starts creating new config from server at 192.168.1.64', 'xcskarel config new --host 192.168.1.64'
      add_xcs_options(c)
      c.action do |args, options|
        
        # let user chose a bot from the server
        server = create_server_from_options(options)
        bot = XCSKarel::Application.choose_bot(server)

        # get our config folder
        config_folder = XCSKarel::XCSFile.get_config_folder
        return unless config_folder

        # dump the bot into that config folder under a random name
        XCSKarel::Application.save_bot(config_folder, bot, server.api_version)
      end
    end

    # Talking to Xcode Server API

    command :bots do |c|
      c.syntax = 'xcskarel bots [options]'
      c.description = 'Fetches all Bots found on the specified server'
      c.example 'get all bot names & identifiers', 'xcskarel bots --host 127.0.0.1'
      c.example 'get all bot metadata', 'xcskarel bots --no_filter --host 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        all_bots = server.get_bots
        puts XCSKarel::Application.format(all_bots, options, ['name', '_id'])
      end
    end

    command :'delete bot' do |c|
      c.syntax = 'xcskarel delete bot [options]'
      c.description = 'Deletes the bot specified by bot name or bot id'
      c.example 'delete the bot on host with name or id', 'xcskarel delete bot --host 127.0.0.1 --bot "My Bot"'
      add_xcs_options(c)
      add_bot_options(c)
      c.action do |args, options|
        raise "No Bot id was specified, please see `xcskarel delete bot --help`" unless options.bot
        server = create_server_from_options(options)
        delete_result = XCSKarel::Application.delete_bot(server, options.bot)
        puts delete_result
      end
    end

    command :'duplicate bot' do |c|
      c.syntax = 'xcskarel duplicate bot [options]'
      c.description = 'Duplicates the bot by bot name or bot id with possible modifications'
      c.example 'duplicate the bot on host with name', 'xcskarel duplicate bot --host 127.0.0.1 --bot "Useful bot" --config path/to/config.json'
      c.option '--newname "New bot name"', 'The name for the newly duplicated bot'
      c.option '--config FILE', 'A JSON file with configuration information for the duplicated bot'
      add_xcs_options(c)
      add_bot_options(c)
      c.action do |args, options|
        raise "No Bot id was specified, please see `xcskarel duplicate bot --help`" unless options.bot
        server = create_server_from_options(options)
        body = nil
        body = { name: options.newname } unless options.newname.nil?
        filePath = nil
        filePath = File.expand_path(options.config) unless options.config.nil?
        fileContents = nil
        unless filePath.nil?
          fileContents = File.read(filePath) if File.exists?(filePath)
        end
        unless fileContents.nil? || fileContents.empty?
          if body.nil?
            body = { configuration: JSON.parse(fileContents) }
          else
            body['configuration'] = JSON.parse(fileContents)
          end
        end
        puts body
        duplicate_result = XCSKarel::Application.duplicate_bot(server, options.bot, body.to_json)
        puts XCSKarel::Application.format(duplicate_result, options, ['name', '_id'])
      end
    end
  
    command :integrations do |c|
      c.syntax = 'xcskarel integrations [options]'
      c.description = 'Fetches all Integrations for a specified Bot identifier'
      c.example 'get all integration identifiers, numbers & results', 'xcskarel integrations --bot BOT_ID --host 127.0.0.1'
      add_xcs_options(c)
      add_bot_options(c)
      c.action do |args, options|
        raise "No Bot id was specified, please see `xcskarel integrations --help`" unless options.bot
        server = create_server_from_options(options)
        all_integrations = XCSKarel::Application.integrations(server, options.bot)
        puts XCSKarel::Application.format(all_integrations, options, ['number', '_id', 'currentStep', 'result'])
      end
    end

    command :issues do |c|
      c.syntax = 'xcskarel issues [options]'
      c.description = 'Fetches issues of an integration or a Bot\'s last integration'
      c.example 'fetches issues for a given integration on localhost', 'xcskarel issues --integration 448946985304230369392c2e6b05a821'
      c.example 'fetches issues for a given bot\'s last integration', 'xcskarel issues --bot "My Bot" --host 192.168.1.64'
      add_xcs_options(c)
      add_bot_or_integration_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        bot = options.bot
        integration = options.integration
        raise "Exactly one of Bot or Integration must be specified, please see `xcskarel issues --help`" unless bot || integration
        all_issues = XCSKarel::Application.issues(server, bot, integration)
        key_paths = [
          'buildServiceErrors.*', 
          'buildServiceWarnings.message', 
          'triggerErrors.*',
          'analyzerWarnings.*', 
          'errors.*.message',
          'testFailures.*.testCase', 
          'testFailures.*.documentFilePath', 
          'testFailures.*.message',
          'warnings.*.message',
          'warnings.*.documentFilePath'
        ]
        puts XCSKarel::Application.format(all_issues, options, key_paths, false)
      end
    end

    command :integrate do |c|
      c.syntax = 'xcskarel integrate [options]'
      c.description = 'Kicks of an integration for the specified Bot id or name'
      c.example 'starts an integration on localhost for bot name', 'xcskarel integrate --bot bot_archiver'
      c.example 'starts an integration on a remote server for bot id', 'xcskarel integrate --bot 448946985304230369392c2e6b05a821 --host 192.168.1.64'
      add_xcs_options(c)
      add_bot_options(c)
      c.action do |args, options|
        bot = options.bot
        raise "No Bot id or name was specified, please see `xcskarel integrations --help`" unless bot
        server = create_server_from_options(options)
        XCSKarel::Application.integrate(server, bot)
      end
    end

    command :health do |c|
      c.syntax = 'xcskarel health [options]'
      c.description = 'Fetches health information of the specified server'
      c.example 'get health', 'xcskarel health --host 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        all_health = server.get_health
        puts XCSKarel::Application.format(all_health, options, ['uptime'])
      end
    end

    command :status do |c|
      c.syntax = 'xcskarel status [options]'
      c.description = 'Fetches status information of the specified server'
      c.example 'get status', 'xcskarel status --host 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        XCSKarel::Application.print_status(server)
      end
    end

    # Connecting to an Xcode Server machine

    command :logs do |c|
      c.syntax = 'xcskarel logs [options]'
      c.description = 'Gets build and control logs'
      c.example 'print logs', 'xcskarel logs --host 192.168.1.64 --user honzadvorsky'
      add_xcs_creds(c)
      c.action do |args, options|
        connection = create_connection_from_options(options)
        XCSKarel::Application.remote_logs(connection)
      end
    end

    # Managing a local Xcode Server

    command :'server start' do |c|
      c.syntax = 'xcskarel server start [options]'
      c.description = 'Start local Xcode Server'
      c.example 'start xcode server', 'xcskarel server start --path /Applications/Xcode.app'
      c.option '--path XCODE_PATH', 'Xcode path'
      c.action do |args, options|
        xcode = options.path
        unless options.path
          xcodes = XCSKarel::Control.installed_xcodes
          raise "No Xcode found, please provide --path" if xcodes.count == 0
          if xcodes.count > 1
            choice = choose("Select Xcode version", *xcodes) 
            xcode = choice
          else
            xcode = xcodes.first
          end
        end

        XCSKarel::Control.start(xcode)
      end
    end

    command :'server stop' do |c|
      c.syntax = 'xcskarel server stop'
      c.description = 'Stop local Xcode Server'
      c.example 'stop xcode server', 'xcskarel server stop'
      c.action do |args, options|
        XCSKarel::Control.stop
      end
    end

    command :'server restart' do |c|
      c.syntax = 'xcskarel server restart'
      c.description = 'Restart local Xcode Server'
      c.example 'restart xcode server', 'xcskarel server restart'
      c.action do |args, options|
        XCSKarel::Control.restart
      end
    end

    command :'server reset' do |c|
      c.syntax = 'xcskarel server reset'
      c.description = 'Reset local Xcode Server (!!! Deletes all local Bots & Integrations !!!)'
      c.example 'reset xcode server', 'xcskarel server reset'
      c.action do |args, options|
        resp = agree("Are you sure you want to reset your local Xcode Server? This will delete all local Bots and Integrations! (y/n)".red)
        XCSKarel::Control.reset if resp
      end
    end

    # Managing Xcode

    command :'xcode select' do |c|
      c.syntax = 'xcskarel xcode select'
      c.description = 'Interactive xcode-select'
      c.example 'choose xcode', 'xcskarel xcode select'
      c.action do |args, options|
        xcodes = XCSKarel::Control.installed_xcodes
        raise "No Xcode found" if xcodes.count == 0
        xcode = choose("Select Xcode version", *xcodes) 
        XCSKarel::Control.select(xcode)
      end
    end

    default_command :help

    run!
  end
end

XCSKarelApplication.new.run




